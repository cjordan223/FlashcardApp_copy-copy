{"ast":null,"code":"import _objectSpread from\"/Users/connerjordan/Documents/Projects/CompTIASecurity+/FlashcardApp_copy copy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import'./App.css';import DeckSelector from'./components/DeckSelector';import Flashcard from'./components/Flashcard';import ProgressBar from'./components/ProgressBar';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[selectedDeck,setSelectedDeck]=useState(null);const[questions,setQuestions]=useState([]);const[currentQuestionIndex,setCurrentQuestionIndex]=useState(0);const[score,setScore]=useState(0);const[showResults,setShowResults]=useState(false);const[answeredQuestions,setAnsweredQuestions]=useState(new Set());const[userAnswers,setUserAnswers]=useState({});useEffect(()=>{if(selectedDeck){loadQuestions();}},[selectedDeck]);const loadQuestions=async()=>{try{const response=await fetch(\"/\".concat(selectedDeck.path));const data=await response.json();setQuestions(data.questions);setCurrentQuestionIndex(0);setScore(0);setShowResults(false);setAnsweredQuestions(new Set());setUserAnswers({});}catch(error){console.error('Error loading questions:',error);}};const handleAnswer=selectedOptions=>{const currentQuestion=questions[currentQuestionIndex];const isCorrect=JSON.stringify(selectedOptions.sort())===JSON.stringify(currentQuestion.correct_answers.sort());setUserAnswers(prev=>_objectSpread(_objectSpread({},prev),{},{[currentQuestionIndex]:selectedOptions}));if(isCorrect&&!answeredQuestions.has(currentQuestionIndex)){setScore(prev=>prev+1);}setAnsweredQuestions(prev=>new Set([...prev,currentQuestionIndex]));};const nextQuestion=()=>{if(currentQuestionIndex<questions.length-1){setCurrentQuestionIndex(prev=>prev+1);}else{setShowResults(true);}};const previousQuestion=()=>{if(currentQuestionIndex>0){setCurrentQuestionIndex(prev=>prev-1);}};const resetQuiz=()=>{setCurrentQuestionIndex(0);setScore(0);setShowResults(false);setAnsweredQuestions(new Set());setUserAnswers({});};const backToDeckSelection=()=>{setSelectedDeck(null);setQuestions([]);setCurrentQuestionIndex(0);setScore(0);setShowResults(false);setAnsweredQuestions(new Set());setUserAnswers({});};if(!selectedDeck){return/*#__PURE__*/_jsx(DeckSelector,{onDeckSelect:setSelectedDeck});}if(showResults){return/*#__PURE__*/_jsx(\"div\",{className:\"app\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"results-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Quiz Complete!\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"score-display\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Your Score: \",score,\" / \",questions.length]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Percentage: \",Math.round(score/questions.length*100),\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"results-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:resetQuiz,className:\"btn btn-primary\",children:\"Try Again\"}),/*#__PURE__*/_jsx(\"button\",{onClick:backToDeckSelection,className:\"btn btn-secondary\",children:\"Choose Different Deck\"})]})]})});}if(questions.length===0){return/*#__PURE__*/_jsx(\"div\",{className:\"app\",children:/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading questions...\"})});}const currentQuestion=questions[currentQuestionIndex];const progress=(currentQuestionIndex+1)/questions.length*100;return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:backToDeckSelection,className:\"back-button\",children:\"\\u2190 Back to Decks\"}),/*#__PURE__*/_jsx(\"h1\",{children:selectedDeck.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"score\",children:[\"Score: \",score,\" / \",questions.length]})]}),/*#__PURE__*/_jsx(ProgressBar,{progress:progress}),/*#__PURE__*/_jsxs(\"div\",{className:\"question-counter\",children:[\"Question \",currentQuestionIndex+1,\" of \",questions.length]}),/*#__PURE__*/_jsx(Flashcard,{question:currentQuestion,onAnswer:handleAnswer,userAnswer:userAnswers[currentQuestionIndex],isAnswered:answeredQuestions.has(currentQuestionIndex)}),/*#__PURE__*/_jsxs(\"div\",{className:\"navigation\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:previousQuestion,disabled:currentQuestionIndex===0,className:\"btn btn-secondary\",children:\"Previous\"}),/*#__PURE__*/_jsx(\"button\",{onClick:nextQuestion,disabled:!answeredQuestions.has(currentQuestionIndex),className:\"btn btn-primary\",children:currentQuestionIndex===questions.length-1?'Finish':'Next'})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","DeckSelector","Flashcard","ProgressBar","jsx","_jsx","jsxs","_jsxs","App","selectedDeck","setSelectedDeck","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","showResults","setShowResults","answeredQuestions","setAnsweredQuestions","Set","userAnswers","setUserAnswers","loadQuestions","response","fetch","concat","path","data","json","error","console","handleAnswer","selectedOptions","currentQuestion","isCorrect","JSON","stringify","sort","correct_answers","prev","_objectSpread","has","nextQuestion","length","previousQuestion","resetQuiz","backToDeckSelection","onDeckSelect","className","children","Math","round","onClick","progress","name","question","onAnswer","userAnswer","isAnswered","disabled"],"sources":["/Users/connerjordan/Documents/Projects/CompTIASecurity+/FlashcardApp_copy copy/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport DeckSelector from './components/DeckSelector';\nimport Flashcard from './components/Flashcard';\nimport ProgressBar from './components/ProgressBar';\n\nfunction App() {\n  const [selectedDeck, setSelectedDeck] = useState(null);\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [answeredQuestions, setAnsweredQuestions] = useState(new Set());\n  const [userAnswers, setUserAnswers] = useState({});\n\n  useEffect(() => {\n    if (selectedDeck) {\n      loadQuestions();\n    }\n  }, [selectedDeck]);\n\n  const loadQuestions = async () => {\n    try {\n      const response = await fetch(`/${selectedDeck.path}`);\n      const data = await response.json();\n      setQuestions(data.questions);\n      setCurrentQuestionIndex(0);\n      setScore(0);\n      setShowResults(false);\n      setAnsweredQuestions(new Set());\n      setUserAnswers({});\n    } catch (error) {\n      console.error('Error loading questions:', error);\n    }\n  };\n\n  const handleAnswer = (selectedOptions) => {\n    const currentQuestion = questions[currentQuestionIndex];\n    const isCorrect = JSON.stringify(selectedOptions.sort()) === JSON.stringify(currentQuestion.correct_answers.sort());\n    \n    setUserAnswers(prev => ({\n      ...prev,\n      [currentQuestionIndex]: selectedOptions\n    }));\n\n    if (isCorrect && !answeredQuestions.has(currentQuestionIndex)) {\n      setScore(prev => prev + 1);\n    }\n\n    setAnsweredQuestions(prev => new Set([...prev, currentQuestionIndex]));\n  };\n\n  const nextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prev => prev + 1);\n    } else {\n      setShowResults(true);\n    }\n  };\n\n  const previousQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prev => prev - 1);\n    }\n  };\n\n  const resetQuiz = () => {\n    setCurrentQuestionIndex(0);\n    setScore(0);\n    setShowResults(false);\n    setAnsweredQuestions(new Set());\n    setUserAnswers({});\n  };\n\n  const backToDeckSelection = () => {\n    setSelectedDeck(null);\n    setQuestions([]);\n    setCurrentQuestionIndex(0);\n    setScore(0);\n    setShowResults(false);\n    setAnsweredQuestions(new Set());\n    setUserAnswers({});\n  };\n\n  if (!selectedDeck) {\n    return <DeckSelector onDeckSelect={setSelectedDeck} />;\n  }\n\n  if (showResults) {\n    return (\n      <div className=\"app\">\n        <div className=\"results-container\">\n          <h1>Quiz Complete!</h1>\n          <div className=\"score-display\">\n            <h2>Your Score: {score} / {questions.length}</h2>\n            <p>Percentage: {Math.round((score / questions.length) * 100)}%</p>\n          </div>\n          <div className=\"results-buttons\">\n            <button onClick={resetQuiz} className=\"btn btn-primary\">\n              Try Again\n            </button>\n            <button onClick={backToDeckSelection} className=\"btn btn-secondary\">\n              Choose Different Deck\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (questions.length === 0) {\n    return (\n      <div className=\"app\">\n        <div className=\"loading\">Loading questions...</div>\n      </div>\n    );\n  }\n\n  const currentQuestion = questions[currentQuestionIndex];\n  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <button onClick={backToDeckSelection} className=\"back-button\">\n          ‚Üê Back to Decks\n        </button>\n        <h1>{selectedDeck.name}</h1>\n        <div className=\"score\">\n          Score: {score} / {questions.length}\n        </div>\n      </div>\n\n      <ProgressBar progress={progress} />\n\n      <div className=\"question-counter\">\n        Question {currentQuestionIndex + 1} of {questions.length}\n      </div>\n\n      <Flashcard\n        question={currentQuestion}\n        onAnswer={handleAnswer}\n        userAnswer={userAnswers[currentQuestionIndex]}\n        isAnswered={answeredQuestions.has(currentQuestionIndex)}\n      />\n\n      <div className=\"navigation\">\n        <button\n          onClick={previousQuestion}\n          disabled={currentQuestionIndex === 0}\n          className=\"btn btn-secondary\"\n        >\n          Previous\n        </button>\n        \n        <button\n          onClick={nextQuestion}\n          disabled={!answeredQuestions.has(currentQuestionIndex)}\n          className=\"btn btn-primary\"\n        >\n          {currentQuestionIndex === questions.length - 1 ? 'Finish' : 'Next'}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"mKAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,WAAW,CAClB,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CACpD,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAC9C,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnD,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,YAAY,CAAEC,eAAe,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CACtD,KAAM,CAACY,SAAS,CAAEC,YAAY,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACc,oBAAoB,CAAEC,uBAAuB,CAAC,CAAGf,QAAQ,CAAC,CAAC,CAAC,CACnE,KAAM,CAACgB,KAAK,CAAEC,QAAQ,CAAC,CAAGjB,QAAQ,CAAC,CAAC,CAAC,CACrC,KAAM,CAACkB,WAAW,CAAEC,cAAc,CAAC,CAAGnB,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACoB,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGrB,QAAQ,CAAC,GAAI,CAAAsB,GAAG,CAAC,CAAC,CAAC,CACrE,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGxB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAElDC,SAAS,CAAC,IAAM,CACd,GAAIS,YAAY,CAAE,CAChBe,aAAa,CAAC,CAAC,CACjB,CACF,CAAC,CAAE,CAACf,YAAY,CAAC,CAAC,CAElB,KAAM,CAAAe,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,KAAAC,MAAA,CAAKlB,YAAY,CAACmB,IAAI,CAAE,CAAC,CACrD,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClClB,YAAY,CAACiB,IAAI,CAAClB,SAAS,CAAC,CAC5BG,uBAAuB,CAAC,CAAC,CAAC,CAC1BE,QAAQ,CAAC,CAAC,CAAC,CACXE,cAAc,CAAC,KAAK,CAAC,CACrBE,oBAAoB,CAAC,GAAI,CAAAC,GAAG,CAAC,CAAC,CAAC,CAC/BE,cAAc,CAAC,CAAC,CAAC,CAAC,CACpB,CAAE,MAAOQ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAClD,CACF,CAAC,CAED,KAAM,CAAAE,YAAY,CAAIC,eAAe,EAAK,CACxC,KAAM,CAAAC,eAAe,CAAGxB,SAAS,CAACE,oBAAoB,CAAC,CACvD,KAAM,CAAAuB,SAAS,CAAGC,IAAI,CAACC,SAAS,CAACJ,eAAe,CAACK,IAAI,CAAC,CAAC,CAAC,GAAKF,IAAI,CAACC,SAAS,CAACH,eAAe,CAACK,eAAe,CAACD,IAAI,CAAC,CAAC,CAAC,CAEnHhB,cAAc,CAACkB,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACdD,IAAI,MACP,CAAC5B,oBAAoB,EAAGqB,eAAe,EACvC,CAAC,CAEH,GAAIE,SAAS,EAAI,CAACjB,iBAAiB,CAACwB,GAAG,CAAC9B,oBAAoB,CAAC,CAAE,CAC7DG,QAAQ,CAACyB,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CAC5B,CAEArB,oBAAoB,CAACqB,IAAI,EAAI,GAAI,CAAApB,GAAG,CAAC,CAAC,GAAGoB,IAAI,CAAE5B,oBAAoB,CAAC,CAAC,CAAC,CACxE,CAAC,CAED,KAAM,CAAA+B,YAAY,CAAGA,CAAA,GAAM,CACzB,GAAI/B,oBAAoB,CAAGF,SAAS,CAACkC,MAAM,CAAG,CAAC,CAAE,CAC/C/B,uBAAuB,CAAC2B,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CAC3C,CAAC,IAAM,CACLvB,cAAc,CAAC,IAAI,CAAC,CACtB,CACF,CAAC,CAED,KAAM,CAAA4B,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,GAAIjC,oBAAoB,CAAG,CAAC,CAAE,CAC5BC,uBAAuB,CAAC2B,IAAI,EAAIA,IAAI,CAAG,CAAC,CAAC,CAC3C,CACF,CAAC,CAED,KAAM,CAAAM,SAAS,CAAGA,CAAA,GAAM,CACtBjC,uBAAuB,CAAC,CAAC,CAAC,CAC1BE,QAAQ,CAAC,CAAC,CAAC,CACXE,cAAc,CAAC,KAAK,CAAC,CACrBE,oBAAoB,CAAC,GAAI,CAAAC,GAAG,CAAC,CAAC,CAAC,CAC/BE,cAAc,CAAC,CAAC,CAAC,CAAC,CACpB,CAAC,CAED,KAAM,CAAAyB,mBAAmB,CAAGA,CAAA,GAAM,CAChCtC,eAAe,CAAC,IAAI,CAAC,CACrBE,YAAY,CAAC,EAAE,CAAC,CAChBE,uBAAuB,CAAC,CAAC,CAAC,CAC1BE,QAAQ,CAAC,CAAC,CAAC,CACXE,cAAc,CAAC,KAAK,CAAC,CACrBE,oBAAoB,CAAC,GAAI,CAAAC,GAAG,CAAC,CAAC,CAAC,CAC/BE,cAAc,CAAC,CAAC,CAAC,CAAC,CACpB,CAAC,CAED,GAAI,CAACd,YAAY,CAAE,CACjB,mBAAOJ,IAAA,CAACJ,YAAY,EAACgD,YAAY,CAAEvC,eAAgB,CAAE,CAAC,CACxD,CAEA,GAAIO,WAAW,CAAE,CACf,mBACEZ,IAAA,QAAK6C,SAAS,CAAC,KAAK,CAAAC,QAAA,cAClB5C,KAAA,QAAK2C,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAChC9C,IAAA,OAAA8C,QAAA,CAAI,gBAAc,CAAI,CAAC,cACvB5C,KAAA,QAAK2C,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5B5C,KAAA,OAAA4C,QAAA,EAAI,cAAY,CAACpC,KAAK,CAAC,KAAG,CAACJ,SAAS,CAACkC,MAAM,EAAK,CAAC,cACjDtC,KAAA,MAAA4C,QAAA,EAAG,cAAY,CAACC,IAAI,CAACC,KAAK,CAAEtC,KAAK,CAAGJ,SAAS,CAACkC,MAAM,CAAI,GAAG,CAAC,CAAC,GAAC,EAAG,CAAC,EAC/D,CAAC,cACNtC,KAAA,QAAK2C,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9B9C,IAAA,WAAQiD,OAAO,CAAEP,SAAU,CAACG,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,WAExD,CAAQ,CAAC,cACT9C,IAAA,WAAQiD,OAAO,CAAEN,mBAAoB,CAACE,SAAS,CAAC,mBAAmB,CAAAC,QAAA,CAAC,uBAEpE,CAAQ,CAAC,EACN,CAAC,EACH,CAAC,CACH,CAAC,CAEV,CAEA,GAAIxC,SAAS,CAACkC,MAAM,GAAK,CAAC,CAAE,CAC1B,mBACExC,IAAA,QAAK6C,SAAS,CAAC,KAAK,CAAAC,QAAA,cAClB9C,IAAA,QAAK6C,SAAS,CAAC,SAAS,CAAAC,QAAA,CAAC,sBAAoB,CAAK,CAAC,CAChD,CAAC,CAEV,CAEA,KAAM,CAAAhB,eAAe,CAAGxB,SAAS,CAACE,oBAAoB,CAAC,CACvD,KAAM,CAAA0C,QAAQ,CAAI,CAAC1C,oBAAoB,CAAG,CAAC,EAAIF,SAAS,CAACkC,MAAM,CAAI,GAAG,CAEtE,mBACEtC,KAAA,QAAK2C,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClB5C,KAAA,QAAK2C,SAAS,CAAC,QAAQ,CAAAC,QAAA,eACrB9C,IAAA,WAAQiD,OAAO,CAAEN,mBAAoB,CAACE,SAAS,CAAC,aAAa,CAAAC,QAAA,CAAC,sBAE9D,CAAQ,CAAC,cACT9C,IAAA,OAAA8C,QAAA,CAAK1C,YAAY,CAAC+C,IAAI,CAAK,CAAC,cAC5BjD,KAAA,QAAK2C,SAAS,CAAC,OAAO,CAAAC,QAAA,EAAC,SACd,CAACpC,KAAK,CAAC,KAAG,CAACJ,SAAS,CAACkC,MAAM,EAC/B,CAAC,EACH,CAAC,cAENxC,IAAA,CAACF,WAAW,EAACoD,QAAQ,CAAEA,QAAS,CAAE,CAAC,cAEnChD,KAAA,QAAK2C,SAAS,CAAC,kBAAkB,CAAAC,QAAA,EAAC,WACvB,CAACtC,oBAAoB,CAAG,CAAC,CAAC,MAAI,CAACF,SAAS,CAACkC,MAAM,EACrD,CAAC,cAENxC,IAAA,CAACH,SAAS,EACRuD,QAAQ,CAAEtB,eAAgB,CAC1BuB,QAAQ,CAAEzB,YAAa,CACvB0B,UAAU,CAAErC,WAAW,CAACT,oBAAoB,CAAE,CAC9C+C,UAAU,CAAEzC,iBAAiB,CAACwB,GAAG,CAAC9B,oBAAoB,CAAE,CACzD,CAAC,cAEFN,KAAA,QAAK2C,SAAS,CAAC,YAAY,CAAAC,QAAA,eACzB9C,IAAA,WACEiD,OAAO,CAAER,gBAAiB,CAC1Be,QAAQ,CAAEhD,oBAAoB,GAAK,CAAE,CACrCqC,SAAS,CAAC,mBAAmB,CAAAC,QAAA,CAC9B,UAED,CAAQ,CAAC,cAET9C,IAAA,WACEiD,OAAO,CAAEV,YAAa,CACtBiB,QAAQ,CAAE,CAAC1C,iBAAiB,CAACwB,GAAG,CAAC9B,oBAAoB,CAAE,CACvDqC,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAE1BtC,oBAAoB,GAAKF,SAAS,CAACkC,MAAM,CAAG,CAAC,CAAG,QAAQ,CAAG,MAAM,CAC5D,CAAC,EACN,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAArC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}